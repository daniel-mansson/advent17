using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace year16day24
{
	class Program
	{
		class Map
		{
			public List<char> Data = new List<char>();
			public int Width;
			public int Start;
			public List<int> InterestPoints = new List<int>();
			public int[] DistanceMatrix = new int[400];

			List<int> m_neighborOffset = new List<int>();

			public Map(string indata)
			{
				var lines = indata.Split('\n');
				Width = lines[0].Length;

				foreach (var l in lines)
				{
					Data.AddRange(l.ToList());
				}

				for (int i = 0; i < Data.Count; i++)
				{
					if (IsInterestPoint(Data[i]))
					{
						InterestPoints.Add(i);
					}
					else if (IsStart(Data[i]))
					{
						Start = i;
					}
				}

				m_neighborOffset = new List<int>()
				{
					1,
					-1,
					Width,
					-Width
				};
			}

			public static bool IsWall(char c)
			{
				return c == '#';
			}

			public static bool IsStart(char c)
			{
				return c == '0';
			}

			public static bool IsInterestPoint(char c)
			{
				return c >= '1' && c <= '9';
			}

			void PutDist(int from, int to, int dist)
			{
				DistanceMatrix[from * 20 + to] = dist;
				DistanceMatrix[to * 20 + from] = dist;
			}

			int GetDist(int from, int to)
			{
				return DistanceMatrix[from * 20 + to];
			}

			public void CalculateDistanceMatrix()
			{
				for (int i = 0; i < InterestPoints.Count; i++)
				{
					int dist = Bfs(Start, InterestPoints[i]);
					PutDist(0, i + 1, dist);
				}

				for (int i = 0; i < InterestPoints.Count; i++)
				{
					for (int j = 1; j < InterestPoints.Count; j++)
					{
						int dist = Bfs(InterestPoints[i], InterestPoints[j]);
						PutDist(i + 1, j + 1, dist);
					}
				}
			}

			public int NaiveTsp()
			{
				var available = new List<int>();
				for (int i = 0; i < InterestPoints.Count; i++)
				{
					available.Add(i + 1);
				}

				return PathSum(0, available, 0);
			}

			int PathSum(int from, List<int> available, int totalDist)
			{
				if (available.Count == InterestPoints.Count - 2)
				{
					Console.Write(".");
				}

				if (available.Count == 1)
				{
					return GetDist(from, available[0]) + totalDist;
				}
				else
				{
					int best = int.MaxValue;
					for (int i = 0; i < available.Count; i++)
					{
						int to = available[i];
						int dist = GetDist(from, to);

						var nextAvailable = available.ToList();
						nextAvailable.RemoveAt(i);

						int s = PathSum(to, nextAvailable, totalDist + dist);
						if (s < best)
							best = s;
					}
					return best;
				}
			}


			public int NaiveTspReturn()
			{
				var available = new List<int>();
				for (int i = 0; i < InterestPoints.Count; i++)
				{
					available.Add(i + 1);
				}

				return PathSumReturn(0, available, 0);
			}

			int PathSumReturn(int from, List<int> available, int totalDist)
			{
				if (available.Count == InterestPoints.Count - 2)
				{
					Console.Write(".");
				}

				if (available.Count == 1)
				{
					return GetDist(from, available[0]) + totalDist + GetDist(available[0], 0);
				}
				else
				{
					int best = int.MaxValue;
					for (int i = 0; i < available.Count; i++)
					{
						int to = available[i];
						int dist = GetDist(from, to);

						var nextAvailable = available.ToList();
						nextAvailable.RemoveAt(i);

						int s = PathSumReturn(to, nextAvailable, totalDist + dist);
						if (s < best)
							best = s;
					}
					return best;
				}
			}

			int Bfs(int from, int to)
			{
				List<int> parent = new List<int>();
				List<int> queue = new List<int>();
				int current = 0;

				queue.Add(from);
				parent.Add(0);
				while (current < queue.Count)
				{
					if (queue[current] == to)
					{
						break;
					}
					else
					{
						var cell = queue[current];
						List<int> neighbors = GetNeighbors(cell);

						for (int i = 0; i < neighbors.Count; i++)
						{
							var n = neighbors[i];
							if (!queue.Contains(n))
							{
								parent.Add(current);
								queue.Add(n);
							}
						}
					}

					++current;
				}

				int dist = 0;
				while (true)
				{
					if (current == 0)
						break;

					dist++;
					current = parent[current];
				}

				return dist;
			}

			List<int> GetNeighbors(int i)
			{
				var res = new List<int>();

				foreach (var offset in m_neighborOffset)
				{
					int pos = i + offset;
					if (!IsWall(Data[pos]))
					{
						res.Add(pos);
					}
				}

				return res;
			}
		}

		static void Main(string[] args)
		{
			Console.WriteLine(Run(s_indata));

			Console.ReadKey();
		}

		static int Run(string indata)
		{
			var map = Transform(indata);
			return Solve(map);
		}

		static Map Transform(string indata)
		{
			return new Map(indata);
		}

		static int Solve(Map indata)
		{
			indata.CalculateDistanceMatrix();

			return indata.NaiveTspReturn();
		}

		static string s_example =
@"###########
#0.1.....2#
#.#######.#
#4.......3#
###########";

		static string s_indata =
@"#######################################################################################################################################################################################
#.....#.....#.....#...#...#.#...#...............................#.#.......#.#...#...........#...............#.#...#.....#.....#.....#...................#.......#.#.......#.....#...#.#
###.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.###.###.#.#.#.#.#.#.###.#.#.###.#.#.#####.###.#.###.#.###.###.#.#.###.#.###.#.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#
#.#......4#.#.....#...#...#.#...........#...#.#.#...#.#...#...#.#.........#.#.#.........#...........#.............#.....#...#...#.#...#...#...#....3#.....#.....#.............#.......#
#.#####.###.#.#####.#.#.#.#.#.#####.###.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#######.#.#.#.#.###.#####.###.#.#.###.###.#.#.#.#.#####.###.###.#.#.###.#.#####.#####.###.#####.###.#
#.#...#.....#.#.#...#.#.#.#.#...........#...#...#.....#...#...#.........#.............#.....#...#...#.........#.#...#.......#.....#.....#...#...#...........#.....#.....#...#...#.#...#
###.#.#.###.#.#.#.#.#.#.#.#.#####.###.###.#.#.###.#######.#.#.###.#.#.###.#######.###.#.#######.#.#####.#.###.#.#####.#.#.#.#.###.#.###.#.#.#.###.###.#.#.###.#.#.###.#.#.#.#.#.###.#.#
#...#.......#.#.#.........#...#.....#.#.....#...#...........#.#...#.....#.#.......................#.......#...#.............#...#...#...#.........#.....#.#...#...#.#.....#.....#.#...#
#.#.###.#.#.#.#.#.#####.###.#.#.###.#.#.#.#.###.###.#####.#.#####.#.###.#.#.#.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.#.#.#.#.#####.#.#########.#####.#.#.#.#.#.#.#.###.#####.#.#.###
#...#...#.#.#...........#...#...#...#.........#.#...#.....#...#...#.#...#.....#.....#.....#...#...........#.#.#...#...#.....#.....#.#.......#...........#.#.......#...#.....#...#.#.#.#
#.#.###.#.#.#.#.###.#.###.#.#.#.###.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#####.#.#.#.#.#####.#.###.###.#.#.#.#####.#####.#.#.#.#.###.#.#.#.#########.#.###.#.###.#.#.#.#.#.#.#.###.#
#...#...#...#.#...#...#.......#...............#.#...#.........#...#.#...#...#.............#.#...#.#.......#.....#...#...#.....#.#...#.........#6..#...#.....#.#.....#...#...#...#.....#
#.#.#.#######.#.#.#.#.#.#####.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#######.#.###.#.###.#####.#.#.#.#.#.#.#####.#######.#.###.#.#.#.#.#.#.#.###.#####.#.#.###.#####.#####.#.#####.#.#.#.###
#.....#.....#...#.#...#.#...........#...#...#.......#.....#.#.#...#.#.....#.....#.....#.......#.....#.#...#.#...#.......#.........#...#.......#...#.#.....#...#.....#.#.#.#.#.....#...#
###.#.###.#.#.###.#.#.#.#.###.###.#.###.#.#.#.#.###.#.###.#######.#.#.###.#.#.#.#.#.#.#.#######.###.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.###.#.#.###.#####.#.#.#.#.#.#.#.#.#.###.#####
#.#.#.#.....#...#.#...#...#...#.........#.....#.....#.#...#.......#...#.....#...#...#...#...#.....#...#.#...#.........#.....#.....#.......#.....#.#.....#...#...#...#.#.....#.........#
#.###.#.#.###.#.#.#.#.#.#.###.#####.###.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.#.#.#####.#####.#.#####.#.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#######.#.###.#.#####.###.###.#.#.#.#.#.###.#
#.....#.#5#...#...#...#.#.....#.........#.....#.#.......#...#.......#.#.......#.#.#...........#.......#...#.#.....#.#.........#...#.#.....#.......#..0#.........#...#.....#.#.....#.#.#
#.###.#.###.#.#.#.#.#.#.###.###.#####.#########.#.#.#.#.###.#.#.###.#.#.#.#.#.###.#.###.#####.#.#.#####.#.#.#.#.###.#######.#####.#########.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#####.#.#.#
#.....#.........#...#...#.........#.....#.......#...#.#.......#.....#.#...#.#.#...#.#.#.....#...............#.#.....#.......#.#.......#.......#.#.....#.#.......#.........#.......#...#
#.###.#.#.#.###.#.###.#########.#.###.#.#.###.#.#.#####.#.#.#.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.#####.#.#.###.#.###.#.#.#####.#.#.#####.#.#.###.#########.#.#.#######.#
#.....#.......................#.#.#...#...#.............#.#.....#...........#...#.#...#.........#.#...#.....#...........#.#.#.......#.#...#.......#.........#.................#.#.....#
#.#.#.#.#.#.#.###.#######.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.#.#######.###.#.#.###.#.#######.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#######.#.#####.#.#####.###.#.#
#...#...#...#.......#.#...#.#.#...#.#...........#.#.......#.....#.......#.......#.............#...#.#.#...#.......#.#.....#...#...#.....#.......#.....#...#.....#.........#.....#.#...#
#.#.###.#.#.#.###.#.#.#.#.#.#.###.#.###.###.###.#.#.###.#.#.#.#.#.#.###.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#.###.#####.#.#.#.###.#.#.#.#
#...............#.....#...#...#.....#.........#.....#...#...#.#.........#...........#.#.....#.#.....#...#...#...#.#.........#.....#...#.............#1#...#.#.........#.#...#.......#.#
#####.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###.###.###.#.###.#.#.###.###.#.#.#.###.#.#.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#######.#.#.#.###.#.#.#.###
#.#...........#.....#...#...#.#.........#...#...#.......#.....#.#.....#.........#.#...#...#...#.......#...#.......#.#.#...#.......#...#...............#.........#.......#.#...#.....#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#######.#.#.###.#####.###.###.#.#.#.#######.#######.#.###.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#####.#.###.#.#####.#########.###.#.#.#.#
#...........#.....#.......#...#...#...#7..#.....#.......#.....#...#.....#.......#.#...#...#.....#.......#.#.#.....#...............#...#.#...#.#...#.......#.#.#.#...#...#.#.#.....#.#.#
###.###.###.#####.#.#########.#####.#.###.#######.###.#.###.#.###.###.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.#####.#.#.#.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#####.#.#.#.#
#...#...#.#.......#...........#.......#.....#.#.......#.....#.#...#...#...#...#.......#...#.#.........#.............#...........#.#...#.#...#.#...#...#...#...#...#.#.....#.......#...#
#.###.#.#.#####.#.###.#.#.#####.#.#.#.#.###.#.#.###.#.#.#.###.#.#.#.#.#######.#.###.###.#.###.#####.#.#.#.###.#.#.#.#####.#.#.#.#####.#.#.###.#.#.#.#.#.###.#.###.###.#.#.#.#.#.#.#.###
#.#.....#.#.#.........#...........#...............#...#.#.#.#.#...#...#.........#...#...#.#.#.#...#...#.......#.#.....#.....#...#.#...#.#...........#.....#.#.....#...#.........#.....#
#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.#####.###.###.###.###.###.###.#############.###.###.#.#.#.#.#.#.#.###.#.#.#####.#.#.#######.###.#.#.#.###.#.#.#.#.###.#######.#.#.#.#.###.#####.#
#...#.#.#.#...#.#...#.....#...........#.#...#.......#...........#...#.....#.#...........#.#.....#...#.#...#...#...............#...#...#.#...#...#...#...#.....#2......#...#.#.#.#.....#
#######################################################################################################################################################################################";
	}
}
